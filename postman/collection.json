{
	"info": {
		"_postman_id": "95baae54-f656-4982-9b04-74b4f8ebb3f6",
		"name": "Microservice Architecture",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25030056"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test('Response has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('id');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"change@mail.com\",\r\n    \"name\": \"Test User rename\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/update?id=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								"update"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'error' field is present in the response\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.error).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'error' field is an empty string\", function() {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.error).to.be.an('string').and.to.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/get?id=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								"get"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.error).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Error message is empty\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.error).to.equal(\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/delete?id=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								"delete"
							],
							"query": [
								{
									"key": "id",
									"value": "10"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "auth",
			"item": [
				{
					"name": "signin",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "test@test.test",
									"type": "text"
								},
								{
									"key": "name",
									"value": "test name",
									"type": "text"
								},
								{
									"key": "password",
									"value": "qwe",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{authUrl}}/signin",
							"host": [
								"{{authUrl}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "test@test.test",
									"type": "text"
								},
								{
									"key": "password",
									"value": "qwe",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{authUrl}}/login",
							"host": [
								"{{authUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "auth",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{authUrl}}/auth",
							"host": [
								"{{authUrl}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "logout",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{authUrl}}/logout",
							"host": [
								"{{authUrl}}"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "test auth",
			"item": [
				{
					"name": "logout",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{authUrl}}/logout",
							"host": [
								"{{authUrl}}"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "1 singin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User has been created\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.status).to.eql(\"success\");",
									"    pm.globals.set(\"userId1\", jsonData.id);",
									"    pm.globals.set(\"userLogin1\", jsonData.email);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "test1-{{$randomAlphaNumeric}}@test.test",
									"type": "text"
								},
								{
									"key": "name",
									"value": "test1 name",
									"type": "text"
								},
								{
									"key": "password",
									"value": "test1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{authUrl}}/signin",
							"host": [
								"{{authUrl}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "1 try",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 403', function () {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Try User rename\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/update?id={{userId1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								"update"
							],
							"query": [
								{
									"key": "id",
									"value": "{{userId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1 login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Login is success', function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.status).to.eql(\"success\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "{{userLogin1}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "test1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{authUrl}}/login",
							"host": [
								"{{authUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "1 edit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User data has been update', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.ex",
									"    pm.expect(jsonData.status).not.eql(\"error\");",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"User1 rename\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/update?id={{userId1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								"update"
							],
							"query": [
								{
									"key": "id",
									"value": "{{userId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1 check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check user name\", function () {",
									"    const jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData.name).to.eql(\"User1 rename\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/me/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"me",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "1 logout",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{authUrl}}/logout",
							"host": [
								"{{authUrl}}"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "2 singin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User has been created\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.status).to.eql(\"success\");",
									"    pm.globals.set(\"userLogin2\", jsonData.email);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "test2-{{$randomAlphaNumeric}}@test.test",
									"type": "text"
								},
								{
									"key": "name",
									"value": "test2 name",
									"type": "text"
								},
								{
									"key": "password",
									"value": "test2",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{authUrl}}/signin",
							"host": [
								"{{authUrl}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "2 login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Login is success', function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.status).to.eql(\"success\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "{{userLogin2}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "test2",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{authUrl}}/login",
							"host": [
								"{{authUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "2 check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check user name\", function () {",
									"    const jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData.name).to.eql(\"test2 name\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/me/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"me",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "test billing",
			"item": [
				{
					"name": "logout",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{authUrl}}/logout",
							"host": [
								"{{authUrl}}"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "singin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User has been created\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.status).to.eql(\"success\");",
									"    pm.globals.set(\"userId\", jsonData.id);",
									"    pm.globals.set(\"userLogin\", jsonData.email);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "client-{{$randomAlphaNumeric}}@mail.local",
									"type": "text"
								},
								{
									"key": "name",
									"value": "client name",
									"type": "text"
								},
								{
									"key": "password",
									"value": "test",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{authUrl}}/signin",
							"host": [
								"{{authUrl}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Login is success', function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.status).to.eql(\"success\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "{{userLogin}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "test",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{authUrl}}/login",
							"host": [
								"{{authUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "add money",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Money has been added\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.status).to.eql(\"success\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-UserId",
								"value": "1",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": {{userId}},\n    \"value\": 200\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{billingUrl}}/incoming",
							"host": [
								"{{billingUrl}}"
							],
							"path": [
								"incoming"
							]
						}
					},
					"response": []
				},
				{
					"name": "create success order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Order has been created\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.status).to.eql(\"success\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-UserId",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Заказ №1\",\n    \"cost\": 150\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/order/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"order",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "check money",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check money\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.balance).to.eql(50);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-UserId",
								"value": "{{userId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{billingUrl}}/get",
							"host": [
								"{{billingUrl}}"
							],
							"path": [
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "check message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check money\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.data[0].user_id).to.eql(pm.globals.get(\"userId\"));",
									"    pm.expect(jsonData.data[0].status).to.eql(1);",
									"    pm.expect(jsonData.data[0].text).to.eql(\"Заказ успешно оплачен\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{notifyUrl}}/get-last",
							"host": [
								"{{notifyUrl}}"
							],
							"path": [
								"get-last"
							]
						}
					},
					"response": []
				},
				{
					"name": "create failed order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Order has been created\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.error).to.eql(\"Не хватает средств\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-UserId",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Заказ №2\",\n    \"cost\": 300\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/order/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"order",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "check message Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check money\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.data[0].user_id).to.eql(pm.globals.get(\"userId\"));",
									"    pm.expect(jsonData.data[0].status).to.eql(1);",
									"    pm.expect(jsonData.data[0].text).to.eql(\"Заказ успешно оплачен\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{notifyUrl}}/get-last",
							"host": [
								"{{notifyUrl}}"
							],
							"path": [
								"get-last"
							]
						}
					},
					"response": []
				},
				{
					"name": "check money",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check money\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.balance).to.eql(50);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-UserId",
								"value": "{{userId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{billingUrl}}/get",
							"host": [
								"{{billingUrl}}"
							],
							"path": [
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "check fail message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check money\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.data[0].user_id).to.eql(pm.globals.get(\"userId\"));",
									"    pm.expect(jsonData.data[0].status).to.eql(1);",
									"    pm.expect(jsonData.data[0].text).to.eql(\"Не удалось оплатить заказ\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{notifyUrl}}/get-last",
							"host": [
								"{{notifyUrl}}"
							],
							"path": [
								"get-last"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "test saga",
			"item": [
				{
					"name": "logout",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{authUrl}}/logout",
							"host": [
								"{{authUrl}}"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "singin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User has been created\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.status).to.eql(\"success\");",
									"    pm.globals.set(\"userId\", jsonData.id);",
									"    pm.globals.set(\"userLogin\", jsonData.email);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "client-{{$randomAlphaNumeric}}@mail.local",
									"type": "text"
								},
								{
									"key": "name",
									"value": "client name",
									"type": "text"
								},
								{
									"key": "password",
									"value": "test",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{authUrl}}/signin",
							"host": [
								"{{authUrl}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Login is success', function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.status).to.eql(\"success\");",
									"    pm.globals.set(\"token\", jsonData.token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "{{userLogin}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "test",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{authUrl}}/login",
							"host": [
								"{{authUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "add money",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Money has been added\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.status).to.eql(\"success\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": {{userId}},\n    \"value\": 250\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{billingUrl}}/incoming",
							"host": [
								"{{billingUrl}}"
							],
							"path": [
								"incoming"
							]
						}
					},
					"response": []
				},
				{
					"name": "add product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Money has been added\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.status).to.eql(\"success\");",
									"    pm.globals.set(\"productId\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-UserId",
								"value": "1",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Товар\",\n    \"price\": 200,\n    \"quantity\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{storeUrl}}/create",
							"host": [
								"{{storeUrl}}"
							],
							"path": [
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "set product quantity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Money has been added\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.status).to.eql(\"success\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-UserId",
								"value": "1",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{productId}},\n    \"quantity\": 10\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{storeUrl}}/update",
							"host": [
								"{{storeUrl}}"
							],
							"path": [
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "check product quantity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Money has been added\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.quantity).to.eql(10);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-UserId",
								"value": "1",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Товар\",\n    \"price\": 200,\n    \"quantity\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{storeUrl}}/?id={{productId}}",
							"host": [
								"{{storeUrl}}"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{productId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create success order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Order has been created\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.status).to.eql(\"success\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"items\": [\n        {\n            \"id\": {{productId}},\n            \"name\": \"Товар\",\n            \"quantity\": 1,\n            \"price\": 200\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{orderUrl}}/create",
							"host": [
								"{{orderUrl}}"
							],
							"path": [
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "check product quantity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Money has been added\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.quantity).to.eql(9);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-UserId",
								"value": "1",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Товар\",\n    \"price\": 200,\n    \"quantity\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{storeUrl}}/?id={{productId}}",
							"host": [
								"{{storeUrl}}"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{productId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "check money",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check money\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.balance).to.eql(50);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{billingUrl}}/get",
							"host": [
								"{{billingUrl}}"
							],
							"path": [
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "check message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check success message\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.data[0].user_id).to.eql(pm.globals.get(\"userId\"));",
									"    pm.expect(jsonData.data[0].status).to.eql(1);",
									"    pm.expect(jsonData.data[0].text).to.includes(\"успешно оплачен!\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{notifyUrl}}/get-last",
							"host": [
								"{{notifyUrl}}"
							],
							"path": [
								"get-last"
							]
						}
					},
					"response": []
				},
				{
					"name": "create failed order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Order has been created\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.error).to.eql(\"Не хватает средств\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"items\": [\n        {\n            \"id\": {{productId}},\n            \"name\": \"Товар\",\n            \"quantity\": 1,\n            \"price\": 200\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{orderUrl}}/create",
							"host": [
								"{{orderUrl}}"
							],
							"path": [
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "check logs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check success message\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"",
									"    pm.expect(jsonData[0].user_id).to.eql(pm.globals.get(\"userId\"));",
									"    pm.expect(jsonData[0].message).to.eql(\"Уведомление failure отправлено\");",
									"",
									"    pm.expect(jsonData[1].user_id).to.eql(pm.globals.get(\"userId\"));",
									"    pm.expect(jsonData[1].message).to.eql(\"Товары сняты с резерва\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{orderUrl}}/logs?userId={{userId}}",
							"host": [
								"{{orderUrl}}"
							],
							"path": [
								"logs"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "check money",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check money\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.balance).to.eql(50);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{billingUrl}}/get",
							"host": [
								"{{billingUrl}}"
							],
							"path": [
								"get"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "billing",
			"item": [
				{
					"name": "create",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-UserId",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{billingUrl}}/create",
							"host": [
								"{{billingUrl}}"
							],
							"path": [
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "incoming",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-UserId",
								"value": "1",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 23,\n    \"value\": 100\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{billingUrl}}/incoming",
							"host": [
								"{{billingUrl}}"
							],
							"path": [
								"incoming"
							]
						}
					},
					"response": []
				},
				{
					"name": "pay",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-UserId",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"value\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:82/pay",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "82",
							"path": [
								"pay"
							]
						}
					},
					"response": []
				},
				{
					"name": "get",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-UserId",
								"value": "23",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{billingUrl}}/get",
							"host": [
								"{{billingUrl}}"
							],
							"path": [
								"get"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "notify",
			"item": [
				{
					"name": "add",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 1,\n    \"email\": \"test@test.ru\",\n    \"text\": \"message\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{notifyUrl}}/add",
							"host": [
								"{{notifyUrl}}"
							],
							"path": [
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "all",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{notifyUrl}}/all",
							"host": [
								"{{notifyUrl}}"
							],
							"path": [
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "get",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{notifyUrl}}/get?id=1",
							"host": [
								"{{notifyUrl}}"
							],
							"path": [
								"get"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get last",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{notifyUrl}}/get-last",
							"host": [
								"{{notifyUrl}}"
							],
							"path": [
								"get-last"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "order",
			"item": [
				{
					"name": "create",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-UserId",
								"value": "1",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Заказ №1\",\n    \"cost\": 100\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/order/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"order",
								"create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "healthcheck",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status = OK\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql('OK');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/health",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"health"
					]
				},
				"description": "This request uses the saved `token` collection variable to access a secret 'name' stored against that token.\n\nIn this request, we used the `token` collection variable as a query param to fetch the name generated for that token. We have added a test to check that a name is correctly returned."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://arch.homework"
		},
		{
			"key": "authUrl",
			"value": "http://arch.homework",
			"type": "string"
		},
		{
			"key": "billingUrl",
			"value": "http://arch.homework/billing",
			"type": "string"
		},
		{
			"key": "notifyUrl",
			"value": "http://arch.homework/notify",
			"type": "string"
		},
		{
			"key": "storeUrl",
			"value": "http://arch.homework/store",
			"type": "string"
		},
		{
			"key": "orderUrl",
			"value": "http://arch.homework/orders",
			"type": "string"
		}
	]
}